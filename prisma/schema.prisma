// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Config {
  id            String   @id @unique @default(uuid())
  dept          String?
  exam_type     String?
  vacation_date String?
  school_opened Int?
  result_title  String
  address       String
  city          String
  zip           String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Objective {
  id           String   @id @unique @default(uuid())
  text         String?
  subject_id   String
  subject_name String
  class_id     String
  class_name   String
  exam_type    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model StudentInfo {
  id           String   @id @default(uuid())
  fullName     String
  className    String
  section      String
  admissionNo  String
  examType     String
  schoolOpened String
  daysAbsent   String
  daysPresent  String
  Result       Result[]
}

model Result {
  id             String      @id @default(uuid())
  dept           String
  exam_type      String
  lowestAverage  String?
  highestAverage String?
  totalScore     String?
  averageScore   String?
  academicYear   String?
  studentId      String
  classId        String
  status         String?     @default("pending")
  resultUrl      String?
  records        Record[]
  ratings        Rating[]
  remarks        Remark[]
  student        StudentInfo @relation(fields: [studentInfoId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  studentInfoId  String
}

model Record {
  id         String   @id @default(uuid())
  resultId   String
  arm        String
  subject    String?
  objectives String?
  outcome    String?
  mta        String?
  ca         String?
  report     String?
  exam       String?
  score      String?
  grade      String?
  action     String?
  color      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Result     Result?  @relation(fields: [resultId], references: [id], onDelete: Cascade)
}

// model Score {
//   id        String   @id @unique @default(uuid())
//   arm       String
//   resultId  String
//   total     String?
//   average   String?
//   higest    String?
//   lowest    String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Result    Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)
// }

model Rating {
  id        String   @id @unique @default(uuid())
  arm       String
  resultId  String
  attribute String?
  rate      String?
  level     String?
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Result    Result?  @relation(fields: [resultId], references: [id], onDelete: Cascade)
}

model Remark {
  id        String   @id @unique @default(uuid())
  arm       String
  resultId  String
  comment   String?
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Result    Result?  @relation(fields: [resultId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @unique @default(uuid())
  text      String
  type      String
  tags      String
  flagged   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
